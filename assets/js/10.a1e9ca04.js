(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{306:function(a,t,n){"use strict";n.r(t);var i=n(0),s=Object(i.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h3",{attrs:{id:"不带svg的普通版本-原生"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不带svg的普通版本-原生"}},[a._v("#")]),a._v(" 不带svg的普通版本（原生）")]),a._v(" "),n("p",[a._v("在选择器中可以通过animation给选择器所在元素添加动画，可以添加多个。")]),a._v(" "),n("p",[a._v("animation有")]),a._v(" "),n("ul",[n("li",[a._v("animation-name")]),a._v(" "),n("li",[a._v("animation-duration")]),a._v(" "),n("li",[a._v("animation-timing-function")]),a._v(" "),n("li",[a._v("animation-delay")]),a._v(" "),n("li",[a._v("animation-iteration-count")]),a._v(" "),n("li",[a._v("animation-direction")]),a._v(" "),n("li",[a._v("animation-fill-mode")]),a._v(" "),n("li",[a._v("animation-play-state")])]),a._v(" "),n("h3",{attrs:{id:"animation-name"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#animation-name"}},[a._v("#")]),a._v(" animation-name")]),a._v(" "),n("p",[a._v("取值有none和一个由合法字符组成的字符串。")]),a._v(" "),n("h3",{attrs:{id:"animation-duration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#animation-duration"}},[a._v("#")]),a._v(" animation-duration")]),a._v(" "),n("p",[a._v("它是动画的持续时间，默认值为0，可以用逗号设置一个时间列表，它会按照列表顺序执行该动画，数字不能没有单位，不然不生效。")]),a._v(" "),n("div",{staticClass:"language-css extra-class"},[n("pre",{pre:!0,attrs:{class:"language-css"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[a._v("animation-duration")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("2s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" //普通版\n"),n("span",{pre:!0,attrs:{class:"token property"}},[a._v("animation-duration")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("3s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("2ms"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("1s"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" //先是3s，然后是2ms，最后是1s\n")])])]),n("h3",{attrs:{id:"animation-timing-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#animation-timing-function"}},[a._v("#")]),a._v(" animation-timing-function")]),a._v(" "),n("p",[a._v("它定义该动画的执行节奏，作用于关键帧周期（比如从0到50%），而非整个动画周期。")]),a._v(" "),n("p",[a._v("取值有我们熟知的ease,ease-in,ease-in-out,ease-out,linear,step-start,step-end，还有比如cubic-bezier(0.1,0.7,1.0,0.1)，cubic-bezier可以在"),n("a",{attrs:{href:"https://cubic-bezier.com/#.29,.68,.83,.67",target:"_blank",rel:"noopener noreferrer"}},[a._v("该网站"),n("OutboundLink")],1),a._v("模拟；steps(4,end)，frames(10)。")]),a._v(" "),n("p",[a._v("我们也可以使用多个动画。")]),a._v(" "),n("h3",{attrs:{id:"animation-delay"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#animation-delay"}},[a._v("#")]),a._v(" animation-delay")]),a._v(" "),n("p",[a._v("定义动画何时开始，如果有两个动画，第二个动画的该项值会和第一个动画同时开始计算（同时倒计时，所以必须比第一个动画执行时间长）。")]),a._v(" "),n("p",[a._v("默认为0，必须写单位（ms或者s）。负值代表动画序列中的某一个状态。")]),a._v(" "),n("h3",{attrs:{id:"animation-iteration-count"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#animation-iteration-count"}},[a._v("#")]),a._v(" animation-iteration-count")]),a._v(" "),n("p",[a._v("定义动画在结束前的执行次数。")]),a._v(" "),n("p",[a._v("可以指定多个值，默认值为1，值可以为小数，但不能为负数，小数代表动画周期。")]),a._v(" "),n("p",[a._v("一般为：")]),a._v(" "),n("div",{staticClass:"language-css extra-class"},[n("pre",{pre:!0,attrs:{class:"language-css"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[a._v("animation-iteration-count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("infinite"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" //任选其一\n"),n("span",{pre:!0,attrs:{class:"token property"}},[a._v("animation-iteration-count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("h3",{attrs:{id:"animation-direction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#animation-direction"}},[a._v("#")]),a._v(" animation-direction")]),a._v(" "),n("p",[a._v("定义动画的播放是否反向。")]),a._v(" "),n("p",[a._v("默认为normal，这代表动画结束之后重置元素状态，使其回到原来的初始状态。")]),a._v(" "),n("p",[a._v("alternate，比较常用，相当于反着执行动画，时间和操作都反向，ease-in变为ease-out，所以要注意这点。")]),a._v(" "),n("p",[a._v("reverse，反向执行动画。")]),a._v(" "),n("p",[a._v("alternate-reverse，先反后正，交替执行，相当于alternate的反向版本。")]),a._v(" "),n("h3",{attrs:{id:"animation-fill-mode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#animation-fill-mode"}},[a._v("#")]),a._v(" animation-fill-mode")]),a._v(" "),n("p",[a._v("设置目标元素在动画之前和动画之后如何应用样式。")]),a._v(" "),n("p",[a._v("默认值为none，意思是不管动画如何变动，动画的开头和结尾都是按照元素本来的样式。")]),a._v(" "),n("p",[a._v("forwards，代表动画结束之后保留结束时的状态（样式），根据方向和执行次数决定最后关键帧。")]),a._v(" "),n("p",[a._v("backwards，代表动画开始之前就使得元素处于动画开始帧的状态，比如0%。")]),a._v(" "),n("p",[a._v("both，代表同时有backwards和forwards。")]),a._v(" "),n("h3",{attrs:{id:"animation-play-state"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#animation-play-state"}},[a._v("#")]),a._v(" animation-play-state")]),a._v(" "),n("p",[a._v("定义一个动画的状态，运行或者是暂停。可以被查询修改。")]),a._v(" "),n("p",[a._v("恢复动画将使其从暂停的状态继续。")]),a._v(" "),n("p",[a._v("默认是running，可以设置为paused。")]),a._v(" "),n("h3",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),n("p",[a._v("使用动画时一般是直接写在animation属性里，而不是分开写，因为合起来写更加方便，如果想多动画，和transition一样，使用逗号分隔即可，但是要注意多动画的播放时机。")])])}),[],!1,null,null,null);t.default=s.exports}}]);